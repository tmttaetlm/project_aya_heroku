import re
import telebot
import sqlite3
from sqlite3 import Error
from telebot import types
from crontab import CronTab
from datetime import datetime

def write_query(query, params = {}):
    connection = sqlite3.connect('....../db.sqlite3')
    cursor = connection.cursor()
    try:
        cursor.execute(query, params)
        connection.commit()
        #print('Query executed successfully')
    except Error as e:
        print(f"The error '{e}' occurred")

def read_query(query, params = {}):
    connection = sqlite3.connect('....../db.sqlite3')
    cursor = connection.cursor()
    result = None
    try:
        cursor.execute(query, params)
        result = cursor.fetchall()
        return result
    except Error as e:
        print(f"The error '{e}' occurred")

def bot_control(message):
    chat_id = message.from_user.id
    # –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.text == 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        users = read_query('select * from main_user where role <> "–ê–¥–º–∏–Ω" order by id desc limit 10')
        msg = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n'
        for user in users:
            reg_date = datetime.strptime(user[12], "%d.%m.%Y %H:%M:%S")
            msg += '–ò–º—è: '+user[4]+'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '+user[5]+'\n–ì–æ—Ä–æ–¥: '+user[6]+'\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: '+reg_date.strftime("%d.%m.%Y %H:%M:%S")+'\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: @'+user[2]+'\n\n'
        bot.send_message(admin_id, msg)
    if message.text == 'üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏—è':
        vacancies = read_query('select * from main_vacancy order by id desc limit 10')
        msg = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n\n'
        for vacancy in vacancies:
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': vacancy[1]})
            msg += '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: '+vacancy[4].strftime("%d.%m.%Y %H:%M:%S")+'\n–¢–µ–∫—Å—Ç: '+vacancy[3]+'\n–ê–≤—Ç–æ—Ä: '+user[4]+'\n–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É: @'+user[2]+'\n\n'
        bot.send_message(admin_id, msg)
    if message.text == 'üí¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
        res = bot.send_message(admin_id, '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É?', reply_markup = keyboards('send_to_bot'))
        write_query('update main_user set msg_id = :msg_id where chat_id = :chat_id', {'chat_id': admin_id, 'msg_id': res.id})
    # –°—Ç–æ—Ä–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
    if message.text == '‚ö°Ô∏è –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ 1 –∫–ª–∏–∫':
        write_query('update main_user set mode = "one_click_vacancy" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, messages[0][1])
        return
    if message.text == 'üîé –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞':
        write_query('update main_user set mode = "search", step = 1 where chat_id = :chat_id', {'chat_id': chat_id})
        search_master(message)
        return
    # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if message.text == 'üìá –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç':
        user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': chat_id})
        write_query('update main_user set mode = "edit_account" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞', reply_markup = keyboards('edit_customer_account') if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫' else keyboards('edit_specialist_account'))
    if message.text == 'üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É':
        bot.send_message(chat_id, '–ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @'+admin_name+'\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É.')
    if message.text == 'üì∞ –ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –±–æ—Ç–µ':
        bot.send_message(chat_id, '–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –Ω–∞–ø–∏—à–∏—Ç–µ @'+admin_name)
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': chat_id})
        write_query('update main_user set mode = "" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = keyboards('customer') if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫' else keyboards('specialist'))
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—â–µ–µ
    if message.text == '‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
        write_query('update main_user set mode = "edit_name" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à–µ –∏–º—è')
    if message.text == 'üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥':
        write_query('update main_user set mode = "edit_city" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup = keyboards('cities'))
    if message.text == 'üì± –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
        write_query('update main_user set mode = "edit_phone" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ', reply_markup = keyboards('phone_request'))
    if message.text == 'üöÆ –£–¥–∞–ª–∏—Ç—å –º–æ–π –∞–∫–∫–∞—É–Ω—Ç':
        write_query('delete from main_user where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–†–∞–¥—ã –±—ã–ª–∏ —Å –≤–∞–º–∏ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!\n\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start')
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    if message.text == 'üòï –Ø –Ω–µ –ó–∞–∫–∞–∑—á–∏–∫':
        write_query('update main_user set role = NULL, name = NULL, phone = NULL, city = NULL, mode = "registration", step = 1 where chat_id = :chat_id', {'chat_id': message.from_user.id})
        res = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ –í—ã:', reply_markup = keyboards('start'))
        write_query('update main_user set msg_id = :msg_id where chat_id = :chat_id', {'chat_id': message.from_user.id, 'msg_id': res.id})
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if message.text == 'üí™ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é':
        write_query('update main_user set mode = "edit_speciality" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é', reply_markup = keyboards('speciality'))
    if message.text == '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã':
        write_query('update main_user set mode = "edit_experience" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', reply_markup = keyboards('experience'))
    if message.text == 'üìÇ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ':
        write_query('update main_user set mode = "edit_portfolio" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ')
    if message.text == 'üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ':
        write_query('update main_user set mode = "edit_photo" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ')
    if message.text == '‚úå –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ':
        write_query('update main_user set mode = "edit_description" where chat_id = :chat_id', {'chat_id': chat_id})
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ')
    if message.text == 'üòï –Ø –Ω–µ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç':
        write_query('update main_user set role = NULL, name = NULL, phone = NULL, city = NULL, experience = NULL, speciality = NULL, photo_url = NULL, portfolio_url = NULL, description = NULL, mode = "registration", step = 1 where chat_id = :chat_id', {'chat_id': message.from_user.id})
        res = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ –í—ã:', reply_markup = keyboards('start'))
        write_query('update main_user set msg_id = :msg_id where chat_id = :chat_id', {'chat_id': message.from_user.id, 'msg_id': res.id})  
    
def create_one_click_vacancy(data):
    chat_id = data.from_user.id
    params = {
        'chat_id': chat_id,
        'msg_id': data.id,
        'text': data.text,
        'date': datetime.now(),
    }
    write_query('insert into main_vacancy (chat_id, msg_id, text, date) values (:chat_id, :msg_id, :text, :date)', params)
    text = '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n'
    text += data.text+'\n\n'
    text += '–í—ã–±–µ—Ä–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å:'
    res = bot.send_message(data.from_user.id, text, reply_markup = keyboards('cities'))
    write_query('update main_user set msg_id = :msg_id where chat_id = :chat_id', {'chat_id': data.from_user.id, 'msg_id': res.id})

def create_task(dt_val):
    cron = CronTab(user=True)
    #job = cron.new(command='python ~/project_aya/send_to_bot.py')
    job = cron.new(command='python3 ~/Code/python/project_aya/bot/send_to_bot.py', comment = dt_val)
    job.day.on(int(dt_val[0:2]))
    job.month.on(int(dt_val[2:4]))
    job.hour.on(int(dt_val[5:7]))
    job.minute.on(int(dt_val[7:9]))
    cron.write()

def search_master(data):
    user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': data.from_user.id})
    if user[0][14] == 'search' and user[0][15] == 1:
        write_query('update main_user set step = 2 where chat_id = :chat_id', {'chat_id': data.from_user.id})
        bot.send_message(data.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:', reply_markup = keyboards('speciality'))
    if user[0][14] == 'search' and user[0][15] == 2:
        write_query('update main_user set step = 3 where chat_id = :chat_id', {'chat_id': data.from_user.id})
        bot.send_message(data.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:', reply_markup = keyboards('experience'))
    if user[0][14] == 'search' and user[0][15] == 3:
        write_query('update main_user set step = 4 where chat_id = :chat_id', {'chat_id': data.from_user.id})
        bot.send_message(data.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup = keyboards('cities'))
    if user[0][14] == 'search' and user[0][15] == 4:
        write_query('update main_user set step = 0, mode = "" where chat_id = :chat_id', {'chat_id': data.from_user.id})
        result = read_query('select * from main_user where city = :city and experience = :experience and speciality = :speciality and role = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" limit 10', search_params)
        msg = '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞:\n\n'
        for row in result:
            msg += '–ò–º—è: '+row[4]+'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '+row[5]+'\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: '+row[10]+'\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: @'+row[2]+'\n\n'
        bot.send_message(data.from_user.id, msg)
    return

def registration_customer(data):
    chat_id = data.from_user.id
    user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': chat_id})
    if user[0][14] != 'registration': return
    if user[0][15] == 1:
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, 'üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', reply_markup = keyboards('phone_request'))
        write_query('update main_user set role = :role, msg_id = :msg_id where chat_id = :chat_id', {'role': '–ó–∞–∫–∞–∑—á–∏–∫', 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 2:
        keyboard = types.ReplyKeyboardRemove()
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '‚ò∫Ô∏è –ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', reply_markup = keyboard)
        if data.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            write_query('update main_user set phone = :phone, msg_id = :msg_id where chat_id = :chat_id', {'phone': data.text, 'msg_id': res.id, 'chat_id': chat_id})
        else:
            if data.contact is None:
                write_query('update main_user set msg_id = :msg_id where chat_id = :chat_id', {'msg_id': res.id, 'chat_id': chat_id})
            else:
                write_query('update main_user set phone = :phone, msg_id = :msg_id where chat_id = :chat_id', {'phone': data.contact.phone_number, 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 3:
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, 'üèô –í–∞—à –≥–æ—Ä–æ–¥?', reply_markup = keyboards('cities'))
        write_query('update main_user set name = :name, msg_id = :msg_id where chat_id = :chat_id', {'name': data.text, 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 4:
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!')
        write_query('update main_user set city = :city, msg_id = :msg_id, mode = "", step = 0 where chat_id = :chat_id', {'city': data.data[data.data.index('_')+1:len(data.data)], 'msg_id': res.id, 'chat_id': chat_id})
        msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '+user[0][2]+' –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–ò–º—è: '+user[0][4]+'\nID: '+str(user[0][1])+'\nType: '+user[0][3]+'\n–¢–µ–ª–µ—Ñ–æ–Ω: '+str(user[0][5])
        bot.send_message(admin_id, msg, reply_markup = keyboards('approve_user', {"user": user[0][1]}))
        return

def registration_specialist (data, skip = 0):
    chat_id = data.from_user.id
    user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': chat_id})
    if user[0][14] != 'registration': return
    if user[0][15] == 1:
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, 'üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', reply_markup = keyboards('phone_request'))
        write_query('update main_user set role = :role, msg_id = :msg_id, step = 2 where chat_id = :chat_id', {'role': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 2:
        keyboard = types.ReplyKeyboardRemove()
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', reply_markup = keyboard)
        if data.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            write_query('update main_user set phone = :phone, msg_id = :msg_id, step = 3 where chat_id = :chat_id', {'phone': '-', 'msg_id': res.id, 'chat_id': chat_id})
        else:
            write_query('update main_user set phone = :phone, msg_id = :msg_id, step = 3 where chat_id = :chat_id', {'phone': data.contact.phone_number, 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 3:
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–í–∞—à –≥–æ—Ä–æ–¥?', reply_markup = keyboards('cities'))
        write_query('update main_user set name = :name, msg_id = :msg_id, step = 4 where chat_id = :chat_id', {'name': data.text, 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 4:
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', reply_markup = keyboards('experience'))
        write_query('update main_user set city = :city, msg_id = :msg_id where chat_id = :chat_id', {'city': data.data[data.data.index('_')+1:len(data.data)], 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 5:
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', reply_markup = keyboards('speciality'))
        write_query('update main_user set experience = :experience, msg_id = :msg_id where chat_id = :chat_id', {'experience': data.data[data.data.index('_')+1:len(data.data)], 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 6:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data = 'skip_photo'))
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', reply_markup = keyboard)
        write_query('update main_user set speciality = :speciality, msg_id = :msg_id where chat_id = :chat_id', {'speciality': data.data[data.data.index('_')+1:len(data.data)], 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 7:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data = 'skip_portfolio'))
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', reply_markup = keyboard)
        if skip:
            write_query('update main_user set photo_url = :photo_url, msg_id = :msg_id where chat_id = :chat_id', {'photo_url': '-', 'msg_id': res.id, 'chat_id': chat_id})
        else:
            write_query('update main_user set photo_url = :photo_url, msg_id = :msg_id where chat_id = :chat_id', {'photo_url': data.photo[-1].file_id, 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 8:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data = 'skip_description'))
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–†–∞—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ', reply_markup = keyboard)
        if skip:
            write_query('update main_user set portfolio_url = :portfolio_url, msg_id = :msg_id where chat_id = :chat_id', {'portfolio_url': '-', 'msg_id': res.id, 'chat_id': chat_id})
        else:
            write_query('update main_user set portfolio_url = :portfolio_url, msg_id = :msg_id where chat_id = :chat_id', {'portfolio_url': data.text, 'msg_id': res.id, 'chat_id': chat_id})
        return
    if user[0][15] == 9:
        if len(user) > 0: bot.delete_message(chat_id, user[0][13])
        res = bot.send_message(chat_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!')
        if skip:
            write_query('update main_user set description = :description, msg_id = :msg_id, step = 0, mode = "" where chat_id = :chat_id', {'description': '-', 'msg_id': res.id, 'chat_id': chat_id})
        else:
            write_query('update main_user set description = :description, msg_id = :msg_id, step = 0, mode = "" where chat_id = :chat_id', {'description': data.text, 'msg_id': res.id, 'chat_id': chat_id})
        msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '+user[0][2]+' –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–ò–º—è: '+user[0][4]+'\nID: '+str(user[0][1])+'\nType: '+user[0][3]+'\n–¢–µ–ª–µ—Ñ–æ–Ω: '+str(user[0][5])
        bot.send_message(admin_id, msg, reply_markup = keyboards('approve_user', {"user": user[0][1]}))
        return

def keyboards(type, params = {}):
    if type == 'customer':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
        keyboard.add(types.KeyboardButton('‚ö°Ô∏è –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ 1 –∫–ª–∏–∫'))
        keyboard.add(types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')) 
        keyboard.add(types.KeyboardButton('üìá –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'))
        keyboard.add(types.KeyboardButton('üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É'))
        keyboard.add(types.KeyboardButton('üì∞ –ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –±–æ—Ç–µ'))
    if type == 'specialist':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
        keyboard.add(types.KeyboardButton('üìá –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'))
        keyboard.add(types.KeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É'))
        keyboard.add(types.KeyboardButton('üì∞ –ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –±–æ—Ç–µ'))
    if type == 'admin':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
        keyboard.add(types.KeyboardButton('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
        keyboard.add(types.KeyboardButton('üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏—è'))
        keyboard.add(types.KeyboardButton('üí¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'))
    if type == 'send_to_bot':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('üöÄ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ', callback_data = 'send_now'))
        keyboard.add(types.InlineKeyboardButton('üïê –í –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Ä–∞–∑–æ–≤–æ)', callback_data = 'send_on_time'))
    if type == 'phone_request':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
        keyboard.add(types.KeyboardButton(text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact = True))
        keyboard.add(types.KeyboardButton(text = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
    if type == 'cities':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(types.InlineKeyboardButton('–ù–µ–≤–∞–∂–Ω–æ', callback_data = 'city_–ù–µ–≤–∞–∂–Ω–æ'),types.InlineKeyboardButton('Almaty', callback_data = 'city_Almaty'),types.InlineKeyboardButton('Nur-Sultan', callback_data = 'city_Nur-Sultan'))
        keyboard.row(types.InlineKeyboardButton('Shymkent', callback_data = 'city_Shymkent'),types.InlineKeyboardButton('Kyzylorda', callback_data = 'city_Kyzylorda'),types.InlineKeyboardButton('Karagandy', callback_data = 'city_Karagandy'))
        keyboard.row(types.InlineKeyboardButton('Taraz', callback_data = 'city_Taraz'),types.InlineKeyboardButton('Aktau', callback_data = 'city_Aktau'),types.InlineKeyboardButton('Atyrau', callback_data = 'city_Atyrau'))
        keyboard.row(types.InlineKeyboardButton('Aktobe', callback_data = 'city_Aktobe'),types.InlineKeyboardButton('Oral', callback_data = 'city_Oral'),types.InlineKeyboardButton('Petropavl', callback_data = 'city_Petropavl'))
        keyboard.row(types.InlineKeyboardButton('Palvodar', callback_data = 'city_Pavlodar'),types.InlineKeyboardButton('Kostanay', callback_data = 'city_Kostanay'),types.InlineKeyboardButton('Oskemen', callback_data = 'city_Oskemen'))
        keyboard.row(types.InlineKeyboardButton('Semey', callback_data = 'city_Semey'),types.InlineKeyboardButton('Taldykorgan', callback_data = 'city_Taldykorgan'),types.InlineKeyboardButton('Zhezkazgan', callback_data = 'city_Zhezkazgan'))
    if type == 'experience':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('–ú–µ–Ω–µ–µ –≥–æ–¥–∞', callback_data = 'exp_less-one'))
        keyboard.add(types.InlineKeyboardButton('1-3 –≥–æ–¥–∞', callback_data = 'exp_one-three'))
        keyboard.add(types.InlineKeyboardButton('–ë–æ–ª–µ–µ 3 –ª–µ—Ç', callback_data = 'exp_more-three'))
    if type == 'speciality':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('SMM –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', callback_data = 'spec_SMM –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ'),types.InlineKeyboardButton('–î–∏–∑–∞–π–Ω', callback_data = 'spec_–î–∏–∑–∞–π–Ω'))
        keyboard.add(types.InlineKeyboardButton('–ú–æ–¥–µ–ª—å', callback_data = 'spec_–ú–æ–¥–µ–ª—å'),types.InlineKeyboardButton('SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', callback_data = 'spec_SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'))
        keyboard.add(types.InlineKeyboardButton('CRM', callback_data = 'spec_CRM'),types.InlineKeyboardButton('–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞', callback_data = 'spec_–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞'))
        keyboard.add(types.InlineKeyboardButton('–¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞', callback_data = 'spec_–¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞'),types.InlineKeyboardButton('–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥/–ü–µ—Ä–µ–≤–æ–¥', callback_data = 'spec_–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥/–ü–µ—Ä–µ–≤–æ–¥'))
        keyboard.add(types.InlineKeyboardButton('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞ (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã)', callback_data = 'spec_–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞ (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã)'),types.InlineKeyboardButton('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–∞', callback_data = 'spec_–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–∞'))
        keyboard.add(types.InlineKeyboardButton('–í–∏–¥–µ–æ—Å—ä–µ–º–∫–∞', callback_data = 'spec_–í–∏–¥–µ–æ—Å—ä–µ–º–∫–∞'),types.InlineKeyboardButton('–§–æ—Ç–æ—Å—ä–µ–º–∫–∞', callback_data = 'spec_–§–æ—Ç–æ—Å—ä–µ–º–∫–∞'))
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–¥–∞–∂–∏', callback_data = 'spec_–ü—Ä–æ–¥–∞–∂–∏'),types.InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data = 'spec_–î—Ä—É–≥–æ–µ'))
    if type == 'approve_user':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data = 'confirm_user_'+str(params['user'])))
        keyboard.add(types.InlineKeyboardButton('üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data = 'reject_user_'+str(params['user'])))
    if type == 'approve_vacancy':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (+ –≤ –∫–∞–Ω–∞–ª)', callback_data = 'to_channel_'+str(params['vacancy'])))
        keyboard.add(types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (+ –≤–Ω—É—Ç—Ä—å –±–æ—Ç–∞)', callback_data = 'to_bot_'+str(params['vacancy'])))
        keyboard.add(types.InlineKeyboardButton('üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data = 'reject_vacancy_'+str(params['vacancy'])))
    if type == 'approve_text':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data = 'confirm_text_'+str(params['vacancy'])))
        keyboard.add(types.InlineKeyboardButton('üö´ –£–¥–∞–ª–∏—Ç—å', callback_data = 'reject_text_'+str(params['vacancy'])))
    if type == 'start':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('üçä –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', callback_data = 'specialist'))
        keyboard.add(types.InlineKeyboardButton('üçí –ó–∞–∫–∞–∑—á–∏–∫', callback_data = 'customer'))
    if type == 'vacancy_to_bot':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('‚û°Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É', url = 'https://t.me/'+params['username']))
        keyboard.add(types.InlineKeyboardButton('‚û°Ô∏è –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑', url = 'https://t.me/aya_cyberbot'))
    if type == 'edit_customer_account':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
        keyboard.add(types.KeyboardButton('‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'))
        keyboard.add(types.KeyboardButton('üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥'))
        keyboard.add(types.KeyboardButton('üì± –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'))
        keyboard.add(types.KeyboardButton('üöÆ –£–¥–∞–ª–∏—Ç—å –º–æ–π –∞–∫–∫–∞—É–Ω—Ç'))
        keyboard.add(types.KeyboardButton('üòï –Ø –Ω–µ –ó–∞–∫–∞–∑—á–∏–∫'))
        keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    if type == 'edit_specialist_account':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
        keyboard.add(types.KeyboardButton('‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'))
        keyboard.add(types.KeyboardButton('üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥'))
        keyboard.add(types.KeyboardButton('üì± –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'))
        keyboard.add(types.KeyboardButton('üí™ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é'))
        keyboard.add(types.KeyboardButton('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'))
        keyboard.add(types.KeyboardButton('üìÇ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'))
        keyboard.add(types.KeyboardButton('üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ'))
        keyboard.add(types.KeyboardButton('‚úå –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ'))
        keyboard.add(types.KeyboardButton('üöÆ –£–¥–∞–ª–∏—Ç—å –º–æ–π –∞–∫–∫–∞—É–Ω—Ç'))
        keyboard.add(types.KeyboardButton('üòï –Ø –Ω–µ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'))
        keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    
    return keyboard  

def main(data):
    bot = telebot.TeleBot('5299933627:AAFadtni2QPlSxeikWyTYNN-DukFGkm_KY0')
    search_params = {}

    admin = read_query('select chat_id, user from main_user where role = "–ê–¥–º–∏–Ω"', {})
    if len(admin) == 0:
        admin_id = 248598993
        admin_name = '–ú–µ–¥–µ—Ç'
        #admin_id = 469614681
    else:
        admin_id = admin[0][0]
        admin_name = admin[0][1]

    messages = read_query('select * from main_message where clue = "bot_msgs"')

    @bot.message_handler(commands=['start'])
    def start_message(message):
        user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': message.from_user.id})
        if len(user) == 0:
            if message.chat.id == admin_id:
                params = {
                    'chat_id': message.from_user.id,
                    'user': message.from_user.username,
                    'role': '–ê–¥–º–∏–Ω',
                    'name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}
                write_query('insert into main_user (chat_id, user, role, name) values (:chat_id, :user, :role, :name)', params)
                bot.send_message(message.chat.id, '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup = keyboards('admin'))
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω', callback_data = 'start_accept'))
                res = bot.send_message(message.chat.id, messages[0][1], reply_markup = markup)
                params = {
                    'chat_id': message.from_user.id,
                    'msg_id': res.id,
                    'user': message.from_user.username,
                    'registration_date': datetime.now(),
                    'mode': 'registration',
                    'step': -1}
                write_query('insert into main_user (chat_id, msg_id, user, registration_date, mode, step) values (:chat_id, :msg_id, :user, :registration_date, :mode, :step)', params)
        else:
            if user[0][14] == 'registration':
                if user[0][15] == -1:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–°–æ–≥–ª–∞—Å–µ–Ω', callback_data = 'start_accept'))
                    res = bot.send_message(message.chat.id, 'üìÑ –ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.', reply_markup = markup)
                    write_query('update main_user set msg_id = :msg_id where chat_id = :chat_id', {'chat_id': message.from_user.id, 'msg_id': res.id})
                elif user[0][15] == 0:
                    bot.delete_message(message.from_user.id, user[0][13])
                    res = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ –í—ã:', reply_markup = keyboards('start'))
                    write_query('update main_user set msg_id = :msg_id where chat_id = :chat_id', {'chat_id': message.from_user.id, 'msg_id': res.id})
                else:
                    if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫': registration_customer(message)
                    elif user[0][3] == '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': registration_specialist(message)
            else:
                if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫': markup = keyboards('customer')
                elif user[0][3] == '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': markup = keyboards('specialist')
                else: markup = keyboards('admin')
                bot.send_message(message.chat.id, '–†–∞–¥—ã —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å, '+user[0][4], reply_markup = markup)

    @bot.callback_query_handler(func=lambda call: call.from_user.id == admin_id)
    def admin_callbacks(callback):
        if callback.data.find('confirm_user') >= 0:
            user_id = callback.data[callback.data.rfind('_')+1:len(callback.data)]
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': user_id})
            if len(user) > 0:  bot.delete_message(user_id, user[0][13])
            bot.send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç!", reply_markup = keyboards('customer') if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫' else keyboards('specialist'))
            bot.send_message(admin_id, '–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '+user[0][2]+'(–ò–º—è: '+user[0][4]+' ID: '+user_id+') –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω')
        if callback.data.find('reject_user') >= 0:
            user_id = callback.data[callback.data.rfind('_')+1:len(callback.data)]
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': user_id})
            if len(user) > 0:  bot.delete_message(user_id, user[0][13])
            write_query('delete from main_user where chat_id = :chat_id', {'chat_id': user_id})
            bot.send_message(user_id, "üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ\n\n–£–∫–∞–∂–∏—Ç–µ –∫—Ç–æ –í—ã:", reply_markup = keyboards('start'))
            bot.send_message(admin_id, '–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '+user[0][2]+'(–ò–º—è: '+user[0][4]+' ID: '+user_id+') –æ—Ç–∫–ª–æ–Ω—ë–Ω')
        if callback.data.find('to_bot') >= 0:
            vacancy_id = callback.data[callback.data.rfind('_')+1:len(callback.data)]
            vacancy = read_query('select * from main_vacancy where id = :id', {'id': vacancy_id})
            users = read_query('select * from main_user where role = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" and city = :city', {'city': vacancy[0][5]})
            for usr in users:
                name = read_query('select user from main_user where chat_id = :chat_id', {'chat_id': vacancy[0][1]})
                msg_text = '‚≠ïÔ∏è –ù–æ–≤—ã–π –ó–∞–∫–∞–∑\n\n'
                msg_text += '‚ñ´Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ:\n'+vacancy[0][3]+'\n\n'
                msg_text += 'üë§ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: '+name[0][0]+'\n'
                bot.send_message(usr[1], msg_text, reply_markup = keyboards('vacancy_to_bot', {'username': usr[2]}))
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': vacancy[0][1]})
            if len(user) > 0: bot.delete_message(vacancy[0][1], user[0][13])
            bot.send_message(vacancy[0][1], "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID "+vacancy_id)
            bot.send_message(admin_id, '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID '+vacancy_id)
        if callback.data.find('to_channel') >= 0:
            vacancy_id = callback.data[callback.data.rfind('_')+1:len(callback.data)]
            vacancy = read_query('select * from main_vacancy where id = :id', {'id': vacancy_id})
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': vacancy[0][1]})
            msg_text = '‚≠ïÔ∏è –ù–æ–≤—ã–π –ó–∞–∫–∞–∑\n\n'
            msg_text += '‚ñ´Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ:\n'+vacancy[0][3]+'\n\n'
            msg_text += 'üë§ –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: '+user[0][4]+'\n'
            groups = {
                '–ù–µ–≤–∞–∂–Ω–æ': '@kazakhstan_jumys',
                'Almaty': '@almaty_jumys',
                'Nur-Sultan': '@astana_jumys',
                'Shymkent': '@shymkent_job',
                'Kyzylorda': '@qyzylorda_job',
                'Karagandy': '@karagandy_job',
                'Taraz': '@taraz_job',
                'Aktau': '@aktau_jumys',
                'Atyrau': '@atyrau_job',
                'Aktobe': '@jobaktobe',
                'Oral': '@oral_job',
                'Petropavl': '@petropavl_job',
                'Pavlodar': '@job_pavlodar',
                'Kostanay': '@kostanay_job',
                'Oskemen': '@oskemen_job',
                'Semey': '@semey_job',
                'Taldykorgan': '@taldykorgan_jumys',
                'Zhezkazgan': '@jezkazgan_jumys'
            }
            #bot.send_message('@digitaljobkz', msg_text, reply_markup = keyboards('vacancy_to_bot', {'username': username[0][0]}))
            bot.send_message(groups.get(vacancy[0][5]), msg_text, reply_markup = keyboards('vacancy_to_bot', {'username': user[0][2]}))
            if len(user) > 0: bot.delete_message(vacancy[0][1], user[0][13])
            bot.send_message(vacancy[0][1], "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID "+vacancy_id)
            bot.send_message(admin_id, '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID '+vacancy_id)
        if callback.data.find('reject_vacancy') >= 0:
            vacancy_id = callback.data[callback.data.rfind('_')+1:len(callback.data)]
            vacancy = read_query('select * from main_vacancy where id = :id', {'id': vacancy_id})
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': vacancy[0][1]})
            if len(user) > 0: bot.delete_message(vacancy[0][1], user[0][13])
            bot.send_message(vacancy[0][1], "üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏–ª–∞ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID "+str(vacancy_id))
            bot.send_message(admin_id, '–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID '+vacancy_id)
            write_query('delete from main_vacancy where id = :id', {'id': vacancy_id})
        if callback.data == 'send_now':
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': admin_id})
            if len(user) > 0: bot.delete_message(admin_id, user[0][13])
            res = bot.send_message(admin_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
            write_query('update main_user set msg_id = :msg_id, mode = "send_now" where chat_id = :chat_id', {'chat_id': admin_id, 'msg_id': res.id})
        if callback.data == 'send_on_time':
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': admin_id})
            if len(user) > 0: bot.delete_message(admin_id, user[0][13])
            res = bot.send_message(admin_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
            write_query('update main_user set msg_id = :msg_id, mode = "send_on_time", step = 1 where chat_id = :chat_id', {'chat_id': admin_id, 'msg_id': res.id})
            write_query('insert into main_message (clue) values ("on_time_msg")')

        bot.answer_callback_query(callback.id)

    @bot.callback_query_handler(func=lambda call: True)
    def user_callbacks(callback):
        user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': callback.from_user.id})
        if callback.data == 'start_accept':
            bot.delete_message(callback.from_user.id, user[0][13])
            res = bot.send_message(callback.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ –í—ã:', reply_markup = keyboards('start'))
            write_query('update main_user set step = 0, msg_id = :msg_id where chat_id = :chat_id', {'chat_id': callback.from_user.id, 'msg_id': res.id})
            return
        if callback.data == 'customer':
            write_query('update main_user set step = 1 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
            registration_customer(callback)
            return
        if callback.data == 'specialist':
            write_query('update main_user set step = 1 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
            registration_specialist(callback)
            return
        if callback.data.find('city_') >= 0:
            if user[0][14] == 'search':
                search_params['city'] = callback.data[callback.data.find('_')+1:len(callback.data)]
                search_master(callback)
            elif user[0][14] == 'edit_city':
                write_query('update main_user set city = :city, mode = "" where chat_id = :chat_id', {'city': callback.data[callback.data.index('_')+1:len(callback.data)], 'chat_id': callback.from_user.id})
                bot.send_message(callback.from_user.id, '–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω.')
            elif user[0][14] == 'one_click_vacancy':
                if len(user) > 0: bot.delete_message(callback.from_user.id, user[0][13])
                res = bot.send_message(callback.from_user.id, messages[0][2])
                write_query('update main_user set msg_id = :msg_id, mode = "" where chat_id = :chat_id', {'chat_id': callback.from_user.id, 'msg_id': res.id})
                write_query('update main_vacancy set city = :city where chat_id = :chat_id', {'chat_id': callback.from_user.id, 'city': callback.data[callback.data.find('_')+1:len(callback.data)]})
                vacancy = read_query('select * from main_vacancy order by id desc limit 1')
                admin_msg_text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '+user[0][2]+' (–ò–º—è: '+user[0][4]+' ID: '+str(user[0][1])+') —Å–æ–∑–¥–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!'
                admin_msg_text += '\n\nID –≤–∞–∫–∞–Ω—Å–∏–∏: '+str(vacancy[0][0])+'\n\n–ì–æ—Ä–æ–¥, –∫—É–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: '+vacancy[0][5]+'\n–¢–µ–∫—Å—Ç:\n'+vacancy[0][3]
                bot.send_message(admin_id, admin_msg_text, reply_markup = keyboards('approve_vacancy', {'vacancy': vacancy[0][0]}))
            else:
                if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫':
                    write_query('update main_user set step = 4 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
                    registration_customer(callback)
                elif user[0][3] == '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å':
                    write_query('update main_user set step = 4 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
                    registration_specialist(callback)
            return
        if callback.data.find('exp_') >= 0:
            if user[0][14] == 'search':
                search_params['experience'] = callback.data[callback.data.find('_')+1:len(callback.data)]
                search_master(callback)
            elif user[0][14] == 'edit_experience':
                write_query('update main_user set experience = :experience, mode = "" where chat_id = :chat_id', {'experience': callback.data[callback.data.index('_')+1:len(callback.data)], 'chat_id': callback.from_user.id})
                bot.send_message(callback.from_user.id, '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω.')
            else:
                write_query('update main_user set step = 5 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
                registration_specialist(callback)
            return
        if callback.data.find('spec_') >= 0:
            if user[0][14] == 'search':
                search_params['speciality'] = callback.data[callback.data.find('_')+1:len(callback.data)]
                search_master(callback)
            elif user[0][14] == 'edit_speciality':
                write_query('update main_user set speciality = :speciality, mode = "" where chat_id = :chat_id', {'speciality': callback.data[callback.data.index('_')+1:len(callback.data)], 'chat_id': callback.from_user.id})
                bot.send_message(callback.from_user.id, '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞.')
            else:
                write_query('update main_user set step = 6 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
                registration_specialist(callback)
            return
        if callback.data == 'skip_photo':
            write_query('update main_user set step = 7 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
            registration_specialist(callback, 1)
            return
        if callback.data == 'skip_portfolio':
            write_query('update main_user set step = 8 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
            registration_specialist(callback, 1)
            return
        if callback.data == 'skip_description':
            write_query('update main_user set step = 9 where chat_id = :chat_id', {'chat_id': callback.from_user.id})
            registration_specialist(callback, 1)
            return
        if callback.data.find('confirm_text') >= 0:
            if len(user) > 0: bot.delete_message(callback.from_user.id, user[0][13])
            res = bot.send_message(callback.from_user.id, '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã–π–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n–ö–æ—Ñ–µ‚òïÔ∏è, –ß–∞–πüçÉ, –í–æ–¥—É? :)')
            write_query('update main_user set msg_id = :msg_id where chat_id = :chat_id', {'chat_id': callback.from_user.id, 'msg_id': res.id})
            vacancy = read_query('select * from main_vacancy order by id desc limit 1')
            admin_msg_text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '+user[0][2]+' (–ò–º—è: '+user[0][4]+' ID: '+str(user[0][1])+') —Å–æ–∑–¥–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!'
            admin_msg_text += '\n\nID –≤–∞–∫–∞–Ω—Å–∏–∏: '+str(vacancy[0][0])+'\n–û–ø–∏—Å–∞–Ω–∏–µ:\n'+vacancy[0][3]
            bot.send_message(admin_id, admin_msg_text, reply_markup = keyboards('approve_vacancy', {'vacancy': vacancy[0][0]}))
        if callback.data.find('reject_text') >= 0:
            vacancy_id = callback.data[callback.data.rfind('_')+1:len(callback.data)]
            write_query('delete from main_vacancy where id = :id', {'id': vacancy_id})
            if len(user) > 0: bot.delete_message(callback.from_user.id, user[0][13])
            bot.send_message(callback.from_user.id, "üö´ –í—ã —É–¥–∞–ª–∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

        bot.answer_callback_query(callback.id)

    @bot.message_handler(content_types=['text', 'contact', 'photo'])
    def get_text_messages(message):
        user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': message.from_user.id})
        if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            if user[0][14] == 'edit_phone':
                write_query('update main_user set phone = :phone, mode = "" where chat_id = :chat_id', {'phone': '-', 'chat_id': user[0][1]})
                bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω.', reply_markup = keyboards('customer') if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫' else keyboards('specialist'))
            else:
                role = read_query('select role from main_user where chat_id = :chat_id', {'chat_id': message.from_user.id})
                if role[0][0] == '–ó–∞–∫–∞–∑—á–∏–∫':
                    write_query('update main_user set step = 2 where chat_id = :chat_id', {'chat_id': message.from_user.id})
                    registration_customer(message)
                elif role[0][0] == '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': 
                    write_query('update main_user set step = 2 where chat_id = :chat_id', {'chat_id': message.from_user.id})
                    registration_specialist(message)
            return
        if message.contact:
            if user[0][14] == 'edit_phone':
                write_query('update main_user set phone = :phone, mode = "" where chat_id = :chat_id', {'phone': message.contact.phone_number, 'chat_id': message.from_user.id})
                bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω.', reply_markup = keyboards('customer') if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫' else keyboards('specialist'))
            else:
                write_query('update main_user set step = 2 where chat_id = :chat_id', {'chat_id': message.from_user.id})
                registration_customer(message)
            return
        if message.photo:
            if user[0][14] == 'edit_photo':
                write_query('update main_user set photo_url = :photo_url, mode = "" where chat_id = :chat_id', {'photo_url': message.photo[-1].file_id, 'chat_id': message.from_user.id})
                bot.send_message(message.from_user.id, '–í–∞—à–µ —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.')
            else:
                write_query('update main_user set step = 7 where chat_id = :chat_id', {'chat_id': message.from_user.id})
                registration_specialist(message)
            return
        if user[0][14] == 'registration' and user[0][15] == 1:
            bot.send_message(message.from_user.id, '‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –≤ –∑–æ–Ω–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.')
        if user[0][14] == 'registration' and user[0][15] == 2:
            if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫':
                write_query('update main_user set step = 3 where chat_id = :chat_id', {'chat_id': message.from_user.id})
                registration_customer(message)
            elif user[0][3] == '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å':
                write_query('update main_user set step = 3 where chat_id = :chat_id', {'chat_id': message.from_user.id})
                registration_specialist(message)
            return
        if user[0][14] == 'registration' and user[0][15] == 7:
            write_query('update main_user set step = 8 where chat_id = :chat_id', {'chat_id': message.from_user.id})
            registration_specialist(message)
            return
        if user[0][14] == 'registration' and user[0][15] == 8:
            write_query('update main_user set step = 9 where chat_id = :chat_id', {'chat_id': message.from_user.id})
            registration_specialist(message)
            return
        if user[0][14] == 'one_click_vacancy':
            create_one_click_vacancy(message)
            return
        if user[0][14] == 'edit_phone':
            result = re.match('^(\+7|7|8)(\d{3})(\d{3})(\d{4})(\d*)', message.text)
            if result:
                write_query('update main_user set phone = :phone, mode = "" where chat_id = :chat_id', {'phone': '7'+message.text[-10:len(message.text)], 'chat_id': message.from_user.id})
                bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω.', reply_markup = keyboards('customer') if user[0][3] == '–ó–∞–∫–∞–∑—á–∏–∫' else keyboards('specialist'))
            else:
                bot.send_message(message.from_user.id, '‚ùó –í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–∫–æ–º—É-–ª–∏–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.')
        if user[0][14] == 'edit_name':
            write_query('update main_user set name = :name, mode = "" where chat_id = :chat_id', {'name': message.text, 'chat_id': message.from_user.id})
            bot.send_message(message.from_user.id, '–ò–º—è –∏–∑–º–µ–Ω—ë–Ω–æ.')
        if user[0][14] == 'edit_portfolio':
            write_query('update main_user set portfolio_url = :portfolio_url, mode = "" where chat_id = :chat_id', {'portfolio_url': message.text, 'chat_id': message.from_user.id})
            bot.send_message(message.from_user.id, '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.')
        if user[0][14] == 'edit_description':
            write_query('update main_user set description = :description, mode = "" where chat_id = :chat_id', {'description': message.text, 'chat_id': message.from_user.id})
            bot.send_message(message.from_user.id, '–†–∞–∑–¥–µ–ª –æ —Å–µ–±–µ –æ–±–Ω–æ–≤–ª–µ–Ω.')
        if user[0][14] == 'send_now':
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': admin_id})
            if len(user) > 0: bot.delete_message(admin_id, user[0][13])
            users = read_query('select * from main_user where role <> "–ê–¥–º–∏–Ω"')
            msg = message.text + f'\n\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_name} –Ω–∞–ø—Ä—è–º—É—é</b>'
            for usr in users: bot.send_message(usr[1], msg, parse_mode = 'HTML')
            bot.send_message(admin_id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.')
            write_query('update main_user set mode = "" where chat_id = :chat_id', {'chat_id': admin_id})
        if user[0][14] == 'send_on_time' and user[0][15] == 1:
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': admin_id})
            if len(user) > 0: bot.delete_message(admin_id, user[0][13])
            res = bot.send_message(admin_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "DDMM_HHMM"')
            write_query('update main_user set msg_id = :msg_id, step = 2 where chat_id = :chat_id', {'chat_id': admin_id, 'msg_id': res.id})
            write_query('update main_message set text = :text where clue = "on_time_msg"', {'text': message.text})
        if user[0][14] == 'send_on_time' and user[0][15] == 2:
            user = read_query('select * from main_user where chat_id = :chat_id', {'chat_id': admin_id})
            if len(user) > 0: bot.delete_message(admin_id, user[0][13])
            res = bot.send_message(admin_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è')
            write_query('update main_user set msg_id = :msg_id, mode = "", step = 0 where chat_id = :chat_id', {'chat_id': admin_id, 'msg_id': res.id})
            write_query('update main_message set clue = :clue where clue = "on_time_msg"', {'clue': 'on_time_msg|'+message.text})
            create_task(message.text)

        bot_control(message)

#bot.infinity_polling()