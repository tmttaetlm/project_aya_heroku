from telebot import types
from crontab import CronTab
from datetime import datetime
from main.models import User, Vacancy
from .keyboards import keyboard

def create_one_click_vacancy(bot, data):
    Vacancy.objects.create(chat_id=data.from_user.id, msg_id=data.id, text=data.text, date=datetime.now())
    text = '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n'
    text += data.text+'\n\n'
    text += '–í—ã–±–µ—Ä–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å:'
    res = bot.send_message(data.from_user.id, text, reply_markup = keyboard('cities'))
    user = User.objects.filter(chat_id=data.from_user.id)
    user[0].msg_id = res.id
    user[0].save()

def create_task(bot, dt_val):
    cron = CronTab(user=True)
    #job = cron.new(command='python ~/project_aya/send_to_bot.py')
    job = cron.new(command='python3 ~/Code/python/project_aya/bot/send_to_bot.py', comment = dt_val)
    job.day.on(int(dt_val[0:2]))
    job.month.on(int(dt_val[2:4]))
    job.hour.on(int(dt_val[5:7]))
    job.minute.on(int(dt_val[7:9]))
    cron.write()

def search_master(bot, data, search_params):
    user = User.objects.filter(chat_id=data.from_user.id)
    if user[0].mode == 'search' and user[0].step == 1:
        user[0].step = 2
        user[0].save()
        bot.send_message(data.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:', reply_markup = keyboard('speciality'))
    if user[0].mode == 'search' and user[0].step == 2:
        user[0].step = 3
        user[0].save()
        bot.send_message(data.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:', reply_markup = keyboard('experience'))
    if user[0].mode == 'search' and user[0].step == 3:
        user[0].step = 4
        user[0].save()
        bot.send_message(data.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup = keyboard('cities'))
    if user[0].mode == 'search' and user[0].step == 4:
        user[0].step = 0
        user[0].mode = ''
        user[0].save()
        result = User.objects.filter(city=search_params['city'], experience=search_params['experience'], speciality=search_params['speciality'], role='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å').order_by('-id')[:10]
        msg = '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞:\n\n'
        for row in result:
            msg += '–ò–º—è: '+row.name+'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '+row.phone+'\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: '+row.portfolio_url+'\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: @'+row.user+'\n\n'
        bot.send_message(data.from_user.id, msg)
    return

def registration_customer(bot, data):
    admin = User.objects.filter(role="–ê–¥–º–∏–Ω")
    user = User.objects.filter(chat_id=data.from_user.id)
    if len(admin) == 0: admin_id = 248598993
    else: admin_id = admin[0].chat_id
    chat_id = data.from_user.id

    if user[0].mode != 'registration': return
    if user[0].step == 1:
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, 'üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', reply_markup = keyboard('phone_request'))
        user[0].role = '–ó–∞–∫–∞–∑—á–∏–∫'
        user[0].msg_id = res.id
        user[0].save()
        return
    if user[0].step == 2:
        remove_keyboard = types.ReplyKeyboardRemove()
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '‚ò∫Ô∏è –ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', reply_markup = remove_keyboard)
        if data.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            user[0].phone = '-'
            user[0].msg_id = res.id
            user[0].save()
        else:
            if data.contact is None:
                user[0].msg_id = res.id
                user[0].save()
            else:
                user[0].phone = data.contact.phone_number
                user[0].msg_id = res.id
                user[0].save()
        return
    if user[0].step == 3:
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, 'üèô –í–∞—à –≥–æ—Ä–æ–¥?', reply_markup = keyboard('cities'))
        user[0].name = data.text
        user[0].msg_id = res.id
        user[0].save()
        return
    if user[0].step == 4:
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!')
        user[0].city = data.data[data.data.index('_')+1:len(data.data)]
        user[0].msg_id = res.id
        user[0].step = 0
        user[0].mode = ''
        user[0].save()
        msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @'+user[0].user+' –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–ò–º—è: '+user[0].name+'\nID: '+str(user[0].chat_id)+'\nType: '+user[0].role+'\n–¢–µ–ª–µ—Ñ–æ–Ω: +'+str(user[0].phone)
        bot.send_message(admin_id, msg, reply_markup = keyboard('approve_user', {'user': user[0].user}))
        return

def registration_specialist (bot, data, skip = 0):
    admin = User.objects.filter(role="–ê–¥–º–∏–Ω")
    user = User.objects.filter(chat_id=data.from_user.id)
    if len(admin) == 0: admin_id = 248598993
    else: admin_id = admin[0].chat_id
    chat_id = data.from_user.id

    if user[0].mode != 'registration': return
    if user[0].step == 1:
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, 'üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', reply_markup = keyboard('phone_request'))
        user[0].role = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
        user[0].msg_id = res.id
        user[0].save()
        return
    if user[0].step == 2:
        remove_keyboard = types.ReplyKeyboardRemove()
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', reply_markup = remove_keyboard)
        if data.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            user[0].phone = '-'
            user[0].msg_id = res.id
            user[0].save()
        else:
            if data.contact is None:
                user[0].msg_id = res.id
                user[0].save()
            else:
                user[0].phone = data.contact.phone_number
                user[0].msg_id = res.id
                user[0].save()
        return
    if user[0].step == 3:
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–í–∞—à –≥–æ—Ä–æ–¥?', reply_markup = keyboard('cities'))
        user[0].name = data.text
        user[0].msg_id = res.id
        user[0].save()
        return
    if user[0].step == 4:
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', reply_markup = keyboard('experience'))
        user[0].city = data.data[data.data.index('_')+1:len(data.data)]
        user[0].msg_id = res.id
        user[0].save()
        return
    if user[0].step == 5:
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', reply_markup = keyboard('speciality'))
        user[0].experience = data.data[data.data.index('_')+1:len(data.data)]
        user[0].msg_id = res.id
        user[0].save()
        return
    if user[0].step == 6:
        t_keyboard = types.InlineKeyboardMarkup()
        t_keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data = 'skip_photo'))
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', reply_markup = t_keyboard)
        user[0].speciality = data.data[data.data.index('_')+1:len(data.data)]
        user[0].msg_id = res.id
        user[0].save()
        return
    if user[0].step == 7:
        t_keyboard = types.InlineKeyboardMarkup()
        t_keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data = 'skip_portfolio'))
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', reply_markup = t_keyboard)
        if skip:
            user[0].photo_url = '-'
            user[0].msg_id = res.id
            user[0].save()
        else:
            user[0].photo_url = data.photo[-1].file_id
            user[0].msg_id = res.id
            user[0].save()
        return
    if user[0].step == 8:
        t_keyboard = types.InlineKeyboardMarkup()
        t_keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data = 'skip_description'))
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–†–∞—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ', reply_markup = t_keyboard)
        if skip:
            user[0].portfolio_url = '-'
            user[0].msg_id = res.id
            user[0].save()
        else:
            user[0].portfolio_url = data.text
            user[0].msg_id = res.id
            user[0].save()
        return
    if user[0].step == 9:
        if len(user) > 0: bot.delete_message(chat_id, user[0].msg_id)
        res = bot.send_message(chat_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!')
        if skip:
            user[0].description = '-'
            user[0].msg_id = res.id
            user[0].save()
        else:
            user[0].description = data.text
            user[0].msg_id = res.id
            user[0].save()
        msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @'+user[0].user+' –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n–ò–º—è: '+user[0].name+'\nID: '+str(user[0].chat_id)+'\nType: '+user[0].role+'\n–¢–µ–ª–µ—Ñ–æ–Ω: +'+str(user[0].phone)
        bot.send_message(admin_id, msg, reply_markup = keyboard('approve_user', {'user': user[0].chat_id}))
        return
